Exercise-02 - Understanding Joins:
===========================================================================================

CREATE TABLE country (CountryID VARCHAR(3), CountryName VARCHAR(50))

INSERT INTO country (CountryID, CountryName) VALUES ('1', 'USA'), ('2', 'United Kingdom'), ('3', 'Spain'), ('4', 'Japan'), ('5', 'Germany'), ('6', 'Russia'), ('7', 'France'), ('8', 'Italy'), ('9', 'Poland'), ('10', 'UAE'), ('91', 'India');


CREATE TABLE regions (RegionID VARCHAR(3), RegionName VARCHAR(50), CountryID VARCHAR(3))

INSERT INTO regions (RegionID, RegionName, CountryID) VALUES ('1', 'US East Region', '1'),
  ('2', 'US West Region', '1'),
  ('3', 'US North Region', '1'),
  ('4', 'US South Region', '1'),
  ('5', 'US Central Region', '1'),
  ('6', 'UK West County', '2'),
  ('7', 'UK East County', '2'),
  ('8', 'India - East Region', '91'),
  ('9', 'India - West Region', '91'),
  ('10', 'West Region Australia', '20'),
  ('11', 'East Region Australia', '20'),
  ('12', 'North Region Australia', '20'),
  ('13', 'South Region Australia', '20');



--JOINS


--Inner Join (Only Intersections)
SELECT country.countryid, country.countryname, regions.regionname 
FROM country
INNER JOIN regions ON country.CountryID = regions.CountryID;



--Left Outer Join
SELECT country.countryid, country.countryname, regions.regionname
FROM country
LEFT JOIN regions
ON country.COuntryID = regions.CountryID;



--Right Outer Join
SELECT regions.regionname AS 'Region Name', country.countryname, country.countryid
FROM country
RIGHT JOIN regions
ON country.CountryID = regions.CountryID;


--Full Join / Cross Join - Syntax of MySQL
--SELECT country.countryid, country.countryname, regions.regionname
--FROM country
--CROSS JOIN regions
--ON country.CountryID = regions.CountryID;


-- Cross Join Syntax for SQL Server
SELECT * FROM country
CROSS JOIN regions



--CASCADED Result

SELECT country.countryid, country.countryname, regions.regionname 
FROM country, regions
